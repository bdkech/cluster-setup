---
# tasks file for k3s_controller

- name: Create k3s installation directory
  ansible.builtin.file:
    path: /usr/local/bin
    state: directory
    mode: '0755'

- name: Set k3s binary name based on architecture
  set_fact:
    k3s_binary_name: >-
      {% if ansible_architecture == 'aarch64' %}k3s-arm64
      {% elif ansible_architecture == 'armv7l' %}k3s-armhf
      {% else %}k3s
      {% endif %}

- name: Download k3s binary
  ansible.builtin.get_url:
    url: "https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/{{ k3s_binary_name }}"
    dest: /usr/local/bin/k3s
    mode: '0755'
    force: yes 

- name: Debug binary arch
  debug:
    var: k3s_binary_name
  
- name: Create k3s service directory
  ansible.builtin.file:
    path: /etc/systemd/system
    state: directory
    mode: '0755'

- name: Create k3s config directory
  ansible.builtin.file:
    path: /etc/rancher/k3s
    state: directory
    mode: '0755'
    recurse: yes

- name: Create k3s manifests directory
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server/manifests
    state: directory
    mode: '0755'
    recurse: yes

- name: Deploy k3s systemd service file
  ansible.builtin.template:
    src: k3s.service.j2
    dest: /etc/systemd/system/k3s.service
    mode: '0644'
  notify: restart k3s-server

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable and start k3s service
  ansible.builtin.service:
    name: k3s
    state: started
    enabled: yes 

- name: Fetch kubeconfig from first controller
  fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ./kubeconfig_{{ inventory_hostname }}.yaml
    flat: yes
  when: inventory_hostname == groups['controllers'][0] 

- name: Show kubeconfig contents
  ansible.builtin.slurp:
    src: /etc/rancher/k3s/k3s.yaml
  register: kubeconfig_file

- name: Print kubeconfig
  debug:
    msg: "{{ kubeconfig_file['content'] | b64decode }}" 